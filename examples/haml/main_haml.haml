%html
  %body
    %p
    %p with inline text
    %p
        with nested text
    <p>Explicit HTML style</p>
    / html comment
    /
      html comment with
      .nested.tags
    -# python comment
    -'''
    tags nested in a -# comment are not supported
    use a docstring instead
    '''

    %h1
      Backslash escapes
    %div
      \% percent
      \= equals sign
      \\ backslash

    %span.tag.with.classes
    %span.tag#with#ids
    .div.by#default
    #more.implicit.divs
    
    %h1
      Attributes
    %div
      %tag{'attribute-style': '{}-style'}
      {}-style attributes must be in Python style, not Ruby
      %tag(attribute-style='html-style')

      %tag(a='a'){'b': 'b'} Mixing up attribute styles
      %tag(class='clobbered'){'class': 'clobbered as well'}{'class': 'finally'}
        Whatever is specified last is used

      %tag{'attributes': 'multiline',
        'more-attributes': 'on second line'}
      %tag(attributes='multiline'
        more-attributes='on second line')

      %tag.css{'class': 'and attribute style'}
      %tag(class=['list', 'of', 'classes'])
      %tag{'id': ['list', 'of', 'ids']}
      %tag(class=['nested', ['list', 'of', 'classes']])

      %tag(boolean attributes)
      / but you can't do %tag{'boolean', 'attributes'}
      %tag{'explicit-true': True, 'explicit-false': False}
      %tag{'data': {'attributes': 'stuff', 'entry': 'thing'}}

    %h1
      Void tags
    %div
      %tag.void/
      %tag.void{'with': 'attributes'}/
      %h2
        Tags void by default
        % br
        %meta
        %img
        \...

    %h1
      Evaluated Python code
    %div
      = 'this code will be evaluated ' + 'and inserted'
      - 'this will only be evaluated'
      %p= ' '.join(['python', 'in', 'a', 'tag'])
      = '<html> is escaped, but only <, >, \' and "'

      - x = 12345
      %p= x
      - for i in range(5):
        %p#element{'id': i}

      != 'unescaped <strong>html</strong>'
      %p= '\n'.join((
        'automatic multiline',
        'python statements',
      ))

    %h1
      Accessing variables
    %div
      %p= a_string_passed_into_render
      %p= another_var
      %ul
        - for string in list_variable:
            %li= string
