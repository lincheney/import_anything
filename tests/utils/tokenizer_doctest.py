"""
Tests for import_anything.utils.full_tokenize
full_tokenize() behaves almost exactly the same as
tokenize.tokenize() except:
    - it preserves whitespace
    
    - it ignores identation (so no all IndentationError,
        any 'indents' are just treated like the
        whitespace in the above point and
        no INDENT/DEDENT tokens)
    
    - no EOF errors from missing closing brackets
        or missing closing string-quotes
    
    - no ENCODING token

The following code/doctest is taken from the tests
for the tokenize module (and slightly modified to account
for the above mentioned differences).

Original code from: Lib/test/test_tokenize.py
    http://hg.python.org/cpython/file/b424d9679308/Lib/test/test_tokenize.py
    See original code for authors and credits



Tests for the tokenize module.

The tests can be really simple. Given a small fragment of source
code, print out a table with tokens. The ENDMARKER is omitted for
brevity.

    >>> dump_tokens("1 + 1")
    NUMBER     '1 '          (1, 0) (1, 2)
    OP         '+ '          (1, 2) (1, 4)
    NUMBER     '1'           (1, 4) (1, 5)

    >>> dump_tokens("if False:\\n"
    ...             "    # NL\\n"
    ...             "    True = False # NEWLINE\\n")
    NAME       'if '         (1, 0) (1, 3)
    NAME       'False'       (1, 3) (1, 8)
    OP         ':'           (1, 8) (1, 9)
    NEWLINE    '\\n'          (1, 9) (1, 10)
    COMMENT    '    # NL'    (2, 0) (2, 8)
    NL         '\\n'          (2, 8) (2, 9)
    NAME       '    True '   (3, 0) (3, 9)
    OP         '= '          (3, 9) (3, 11)
    NAME       'False '      (3, 11) (3, 17)
    COMMENT    '# NEWLINE'   (3, 17) (3, 26)
    NEWLINE    '\\n'          (3, 26) (3, 27)

Ordinary integers and binary operators

    >>> dump_tokens("0xff <= 255")
    NUMBER     '0xff '       (1, 0) (1, 5)
    OP         '<= '         (1, 5) (1, 8)
    NUMBER     '255'         (1, 8) (1, 11)
    >>> dump_tokens("0b10 <= 255")
    NUMBER     '0b10 '       (1, 0) (1, 5)
    OP         '<= '         (1, 5) (1, 8)
    NUMBER     '255'         (1, 8) (1, 11)
    >>> dump_tokens("0o123 <= 0O123")
    NUMBER     '0o123 '      (1, 0) (1, 6)
    OP         '<= '         (1, 6) (1, 9)
    NUMBER     '0O123'       (1, 9) (1, 14)
    >>> dump_tokens("1234567 > ~0x15")
    NUMBER     '1234567 '    (1, 0) (1, 8)
    OP         '> '          (1, 8) (1, 10)
    OP         '~'           (1, 10) (1, 11)
    NUMBER     '0x15'        (1, 11) (1, 15)
    >>> dump_tokens("2134568 != 1231515")
    NUMBER     '2134568 '    (1, 0) (1, 8)
    OP         '!= '         (1, 8) (1, 11)
    NUMBER     '1231515'     (1, 11) (1, 18)
    >>> dump_tokens("(-124561-1) & 200000000")
    OP         '('           (1, 0) (1, 1)
    OP         '-'           (1, 1) (1, 2)
    NUMBER     '124561'      (1, 2) (1, 8)
    OP         '-'           (1, 8) (1, 9)
    NUMBER     '1'           (1, 9) (1, 10)
    OP         ') '          (1, 10) (1, 12)
    OP         '& '          (1, 12) (1, 14)
    NUMBER     '200000000'   (1, 14) (1, 23)
    >>> dump_tokens("0xdeadbeef != -1")
    NUMBER     '0xdeadbeef ' (1, 0) (1, 11)
    OP         '!= '         (1, 11) (1, 14)
    OP         '-'           (1, 14) (1, 15)
    NUMBER     '1'           (1, 15) (1, 16)
    >>> dump_tokens("0xdeadc0de & 12345")
    NUMBER     '0xdeadc0de ' (1, 0) (1, 11)
    OP         '& '          (1, 11) (1, 13)
    NUMBER     '12345'       (1, 13) (1, 18)
    >>> dump_tokens("0xFF & 0x15 | 1234")
    NUMBER     '0xFF '       (1, 0) (1, 5)
    OP         '& '          (1, 5) (1, 7)
    NUMBER     '0x15 '       (1, 7) (1, 12)
    OP         '| '          (1, 12) (1, 14)
    NUMBER     '1234'        (1, 14) (1, 18)

Long integers

    >>> dump_tokens("x = 0")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '0'           (1, 4) (1, 5)
    >>> dump_tokens("x = 0xfffffffffff")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '0xfffffffffff' (1, 4) (1, 17)
    >>> dump_tokens("x = 123141242151251616110")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '123141242151251616110' (1, 4) (1, 25)
    >>> dump_tokens("x = -15921590215012591")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    OP         '-'           (1, 4) (1, 5)
    NUMBER     '15921590215012591' (1, 5) (1, 22)

Floating point numbers

    >>> dump_tokens("x = 3.14159")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '3.14159'     (1, 4) (1, 11)
    >>> dump_tokens("x = 314159.")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '314159.'     (1, 4) (1, 11)
    >>> dump_tokens("x = .314159")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '.314159'     (1, 4) (1, 11)
    >>> dump_tokens("x = 3e14159")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '3e14159'     (1, 4) (1, 11)
    >>> dump_tokens("x = 3E123")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '3E123'       (1, 4) (1, 9)
    >>> dump_tokens("x+y = 3e-1230")
    NAME       'x'           (1, 0) (1, 1)
    OP         '+'           (1, 1) (1, 2)
    NAME       'y '          (1, 2) (1, 4)
    OP         '= '          (1, 4) (1, 6)
    NUMBER     '3e-1230'     (1, 6) (1, 13)
    >>> dump_tokens("x = 3.14e159")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '3.14e159'    (1, 4) (1, 12)

String literals

    >>> dump_tokens("x = ''; y = \\\"\\\"")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    STRING     "''"          (1, 4) (1, 6)
    OP         '; '          (1, 6) (1, 8)
    NAME       'y '          (1, 8) (1, 10)
    OP         '= '          (1, 10) (1, 12)
    STRING     '""'          (1, 12) (1, 14)
    >>> dump_tokens("x = '\\\"'; y = \\\"'\\\"")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    STRING     '\\'"\\''       (1, 4) (1, 7)
    OP         '; '          (1, 7) (1, 9)
    NAME       'y '          (1, 9) (1, 11)
    OP         '= '          (1, 11) (1, 13)
    STRING     '"\\'"'        (1, 13) (1, 16)
    >>> dump_tokens("x = \\\"doesn't \\\"shrink\\\", does it\\\"")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    STRING     '"doesn\\'t "' (1, 4) (1, 14)
    NAME       'shrink'      (1, 14) (1, 20)
    STRING     '", does it"' (1, 20) (1, 31)
    >>> dump_tokens("x = 'abc' + 'ABC'")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    STRING     "'abc' "      (1, 4) (1, 10)
    OP         '+ '          (1, 10) (1, 12)
    STRING     "'ABC'"       (1, 12) (1, 17)
    >>> dump_tokens('y = "ABC" + "ABC"')
    NAME       'y '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    STRING     '"ABC" '      (1, 4) (1, 10)
    OP         '+ '          (1, 10) (1, 12)
    STRING     '"ABC"'       (1, 12) (1, 17)
    >>> dump_tokens("x = r'abc' + r'ABC' + R'ABC' + R'ABC'")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    STRING     "r'abc' "     (1, 4) (1, 11)
    OP         '+ '          (1, 11) (1, 13)
    STRING     "r'ABC' "     (1, 13) (1, 20)
    OP         '+ '          (1, 20) (1, 22)
    STRING     "R'ABC' "     (1, 22) (1, 29)
    OP         '+ '          (1, 29) (1, 31)
    STRING     "R'ABC'"      (1, 31) (1, 37)
    >>> dump_tokens('y = r"abc" + r"ABC" + R"ABC" + R"ABC"')
    NAME       'y '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    STRING     'r"abc" '     (1, 4) (1, 11)
    OP         '+ '          (1, 11) (1, 13)
    STRING     'r"ABC" '     (1, 13) (1, 20)
    OP         '+ '          (1, 20) (1, 22)
    STRING     'R"ABC" '     (1, 22) (1, 29)
    OP         '+ '          (1, 29) (1, 31)
    STRING     'R"ABC"'      (1, 31) (1, 37)

    >>> dump_tokens("u'abc' + U'abc'")
    STRING     "u'abc' "     (1, 0) (1, 7)
    OP         '+ '          (1, 7) (1, 9)
    STRING     "U'abc'"      (1, 9) (1, 15)
    >>> dump_tokens('u"abc" + U"abc"')
    STRING     'u"abc" '     (1, 0) (1, 7)
    OP         '+ '          (1, 7) (1, 9)
    STRING     'U"abc"'      (1, 9) (1, 15)

    >>> dump_tokens("b'abc' + B'abc'")
    STRING     "b'abc' "     (1, 0) (1, 7)
    OP         '+ '          (1, 7) (1, 9)
    STRING     "B'abc'"      (1, 9) (1, 15)
    >>> dump_tokens('b"abc" + B"abc"')
    STRING     'b"abc" '     (1, 0) (1, 7)
    OP         '+ '          (1, 7) (1, 9)
    STRING     'B"abc"'      (1, 9) (1, 15)
    >>> dump_tokens("br'abc' + bR'abc' + Br'abc' + BR'abc'")
    STRING     "br'abc' "    (1, 0) (1, 8)
    OP         '+ '          (1, 8) (1, 10)
    STRING     "bR'abc' "    (1, 10) (1, 18)
    OP         '+ '          (1, 18) (1, 20)
    STRING     "Br'abc' "    (1, 20) (1, 28)
    OP         '+ '          (1, 28) (1, 30)
    STRING     "BR'abc'"     (1, 30) (1, 37)
    >>> dump_tokens('br"abc" + bR"abc" + Br"abc" + BR"abc"')
    STRING     'br"abc" '    (1, 0) (1, 8)
    OP         '+ '          (1, 8) (1, 10)
    STRING     'bR"abc" '    (1, 10) (1, 18)
    OP         '+ '          (1, 18) (1, 20)
    STRING     'Br"abc" '    (1, 20) (1, 28)
    OP         '+ '          (1, 28) (1, 30)
    STRING     'BR"abc"'     (1, 30) (1, 37)
    >>> dump_tokens("rb'abc' + rB'abc' + Rb'abc' + RB'abc'")
    STRING     "rb'abc' "    (1, 0) (1, 8)
    OP         '+ '          (1, 8) (1, 10)
    STRING     "rB'abc' "    (1, 10) (1, 18)
    OP         '+ '          (1, 18) (1, 20)
    STRING     "Rb'abc' "    (1, 20) (1, 28)
    OP         '+ '          (1, 28) (1, 30)
    STRING     "RB'abc'"     (1, 30) (1, 37)
    >>> dump_tokens('rb"abc" + rB"abc" + Rb"abc" + RB"abc"')
    STRING     'rb"abc" '    (1, 0) (1, 8)
    OP         '+ '          (1, 8) (1, 10)
    STRING     'rB"abc" '    (1, 10) (1, 18)
    OP         '+ '          (1, 18) (1, 20)
    STRING     'Rb"abc" '    (1, 20) (1, 28)
    OP         '+ '          (1, 28) (1, 30)
    STRING     'RB"abc"'     (1, 30) (1, 37)

Operators

    >>> dump_tokens("def d22(a, b, c=2, d=2, *k): pass")
    NAME       'def '        (1, 0) (1, 4)
    NAME       'd22'         (1, 4) (1, 7)
    OP         '('           (1, 7) (1, 8)
    NAME       'a'           (1, 8) (1, 9)
    OP         ', '          (1, 9) (1, 11)
    NAME       'b'           (1, 11) (1, 12)
    OP         ', '          (1, 12) (1, 14)
    NAME       'c'           (1, 14) (1, 15)
    OP         '='           (1, 15) (1, 16)
    NUMBER     '2'           (1, 16) (1, 17)
    OP         ', '          (1, 17) (1, 19)
    NAME       'd'           (1, 19) (1, 20)
    OP         '='           (1, 20) (1, 21)
    NUMBER     '2'           (1, 21) (1, 22)
    OP         ', '          (1, 22) (1, 24)
    OP         '*'           (1, 24) (1, 25)
    NAME       'k'           (1, 25) (1, 26)
    OP         ')'           (1, 26) (1, 27)
    OP         ': '          (1, 27) (1, 29)
    NAME       'pass'        (1, 29) (1, 33)
    >>> dump_tokens("def d01v_(a=1, *k, **w): pass")
    NAME       'def '        (1, 0) (1, 4)
    NAME       'd01v_'       (1, 4) (1, 9)
    OP         '('           (1, 9) (1, 10)
    NAME       'a'           (1, 10) (1, 11)
    OP         '='           (1, 11) (1, 12)
    NUMBER     '1'           (1, 12) (1, 13)
    OP         ', '          (1, 13) (1, 15)
    OP         '*'           (1, 15) (1, 16)
    NAME       'k'           (1, 16) (1, 17)
    OP         ', '          (1, 17) (1, 19)
    OP         '**'          (1, 19) (1, 21)
    NAME       'w'           (1, 21) (1, 22)
    OP         ')'           (1, 22) (1, 23)
    OP         ': '          (1, 23) (1, 25)
    NAME       'pass'        (1, 25) (1, 29)

Comparison

    >>> dump_tokens("if 1 < 1 > 1 == 1 >= 5 <= 0x15 <= 0x12 != " +
    ...             "1 and 5 in 1 not in 1 is 1 or 5 is not 1: pass")
    NAME       'if '         (1, 0) (1, 3)
    NUMBER     '1 '          (1, 3) (1, 5)
    OP         '< '          (1, 5) (1, 7)
    NUMBER     '1 '          (1, 7) (1, 9)
    OP         '> '          (1, 9) (1, 11)
    NUMBER     '1 '          (1, 11) (1, 13)
    OP         '== '         (1, 13) (1, 16)
    NUMBER     '1 '          (1, 16) (1, 18)
    OP         '>= '         (1, 18) (1, 21)
    NUMBER     '5 '          (1, 21) (1, 23)
    OP         '<= '         (1, 23) (1, 26)
    NUMBER     '0x15 '       (1, 26) (1, 31)
    OP         '<= '         (1, 31) (1, 34)
    NUMBER     '0x12 '       (1, 34) (1, 39)
    OP         '!= '         (1, 39) (1, 42)
    NUMBER     '1 '          (1, 42) (1, 44)
    NAME       'and '        (1, 44) (1, 48)
    NUMBER     '5 '          (1, 48) (1, 50)
    NAME       'in '         (1, 50) (1, 53)
    NUMBER     '1 '          (1, 53) (1, 55)
    NAME       'not '        (1, 55) (1, 59)
    NAME       'in '         (1, 59) (1, 62)
    NUMBER     '1 '          (1, 62) (1, 64)
    NAME       'is '         (1, 64) (1, 67)
    NUMBER     '1 '          (1, 67) (1, 69)
    NAME       'or '         (1, 69) (1, 72)
    NUMBER     '5 '          (1, 72) (1, 74)
    NAME       'is '         (1, 74) (1, 77)
    NAME       'not '        (1, 77) (1, 81)
    NUMBER     '1'           (1, 81) (1, 82)
    OP         ': '          (1, 82) (1, 84)
    NAME       'pass'        (1, 84) (1, 88)

Shift

    >>> dump_tokens("x = 1 << 1 >> 5")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '1 '          (1, 4) (1, 6)
    OP         '<< '         (1, 6) (1, 9)
    NUMBER     '1 '          (1, 9) (1, 11)
    OP         '>> '         (1, 11) (1, 14)
    NUMBER     '5'           (1, 14) (1, 15)

Additive

    >>> dump_tokens("x = 1 - y + 15 - 1 + 0x124 + z + a[5]")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '1 '          (1, 4) (1, 6)
    OP         '- '          (1, 6) (1, 8)
    NAME       'y '          (1, 8) (1, 10)
    OP         '+ '          (1, 10) (1, 12)
    NUMBER     '15 '         (1, 12) (1, 15)
    OP         '- '          (1, 15) (1, 17)
    NUMBER     '1 '          (1, 17) (1, 19)
    OP         '+ '          (1, 19) (1, 21)
    NUMBER     '0x124 '      (1, 21) (1, 27)
    OP         '+ '          (1, 27) (1, 29)
    NAME       'z '          (1, 29) (1, 31)
    OP         '+ '          (1, 31) (1, 33)
    NAME       'a'           (1, 33) (1, 34)
    OP         '['           (1, 34) (1, 35)
    NUMBER     '5'           (1, 35) (1, 36)
    OP         ']'           (1, 36) (1, 37)

Multiplicative

    >>> dump_tokens("x = 1//1*1/5*12%0x12")
    NAME       'x '          (1, 0) (1, 2)
    OP         '= '          (1, 2) (1, 4)
    NUMBER     '1'           (1, 4) (1, 5)
    OP         '//'          (1, 5) (1, 7)
    NUMBER     '1'           (1, 7) (1, 8)
    OP         '*'           (1, 8) (1, 9)
    NUMBER     '1'           (1, 9) (1, 10)
    OP         '/'           (1, 10) (1, 11)
    NUMBER     '5'           (1, 11) (1, 12)
    OP         '*'           (1, 12) (1, 13)
    NUMBER     '12'          (1, 13) (1, 15)
    OP         '%'           (1, 15) (1, 16)
    NUMBER     '0x12'        (1, 16) (1, 20)

Unary

    >>> dump_tokens("~1 ^ 1 & 1 |1 ^ -1")
    OP         '~'           (1, 0) (1, 1)
    NUMBER     '1 '          (1, 1) (1, 3)
    OP         '^ '          (1, 3) (1, 5)
    NUMBER     '1 '          (1, 5) (1, 7)
    OP         '& '          (1, 7) (1, 9)
    NUMBER     '1 '          (1, 9) (1, 11)
    OP         '|'           (1, 11) (1, 12)
    NUMBER     '1 '          (1, 12) (1, 14)
    OP         '^ '          (1, 14) (1, 16)
    OP         '-'           (1, 16) (1, 17)
    NUMBER     '1'           (1, 17) (1, 18)
    >>> dump_tokens("-1*1/1+1*1//1 - ---1**1")
    OP         '-'           (1, 0) (1, 1)
    NUMBER     '1'           (1, 1) (1, 2)
    OP         '*'           (1, 2) (1, 3)
    NUMBER     '1'           (1, 3) (1, 4)
    OP         '/'           (1, 4) (1, 5)
    NUMBER     '1'           (1, 5) (1, 6)
    OP         '+'           (1, 6) (1, 7)
    NUMBER     '1'           (1, 7) (1, 8)
    OP         '*'           (1, 8) (1, 9)
    NUMBER     '1'           (1, 9) (1, 10)
    OP         '//'          (1, 10) (1, 12)
    NUMBER     '1 '          (1, 12) (1, 14)
    OP         '- '          (1, 14) (1, 16)
    OP         '-'           (1, 16) (1, 17)
    OP         '-'           (1, 17) (1, 18)
    OP         '-'           (1, 18) (1, 19)
    NUMBER     '1'           (1, 19) (1, 20)
    OP         '**'          (1, 20) (1, 22)
    NUMBER     '1'           (1, 22) (1, 23)

Selector

    >>> dump_tokens("import sys, time\\nx = sys.modules['time'].time()")
    NAME       'import '     (1, 0) (1, 7)
    NAME       'sys'         (1, 7) (1, 10)
    OP         ', '          (1, 10) (1, 12)
    NAME       'time'        (1, 12) (1, 16)
    NEWLINE    '\\n'          (1, 16) (1, 17)
    NAME       'x '          (2, 0) (2, 2)
    OP         '= '          (2, 2) (2, 4)
    NAME       'sys'         (2, 4) (2, 7)
    OP         '.'           (2, 7) (2, 8)
    NAME       'modules'     (2, 8) (2, 15)
    OP         '['           (2, 15) (2, 16)
    STRING     "'time'"      (2, 16) (2, 22)
    OP         ']'           (2, 22) (2, 23)
    OP         '.'           (2, 23) (2, 24)
    NAME       'time'        (2, 24) (2, 28)
    OP         '('           (2, 28) (2, 29)
    OP         ')'           (2, 29) (2, 30)

Methods

    >>> dump_tokens("@staticmethod\\ndef foo(x,y): pass")
    OP         '@'           (1, 0) (1, 1)
    NAME       'staticmethod' (1, 1) (1, 13)
    NEWLINE    '\\n'          (1, 13) (1, 14)
    NAME       'def '        (2, 0) (2, 4)
    NAME       'foo'         (2, 4) (2, 7)
    OP         '('           (2, 7) (2, 8)
    NAME       'x'           (2, 8) (2, 9)
    OP         ','           (2, 9) (2, 10)
    NAME       'y'           (2, 10) (2, 11)
    OP         ')'           (2, 11) (2, 12)
    OP         ': '          (2, 12) (2, 14)
    NAME       'pass'        (2, 14) (2, 18)

Evil tabs

    >>> dump_tokens("def f():\\n\\tif x\\n        \\tpass")
    NAME       'def '        (1, 0) (1, 4)
    NAME       'f'           (1, 4) (1, 5)
    OP         '('           (1, 5) (1, 6)
    OP         ')'           (1, 6) (1, 7)
    OP         ':'           (1, 7) (1, 8)
    NEWLINE    '\\n'          (1, 8) (1, 9)
    NAME       '\\tif '       (2, 0) (2, 4)
    NAME       'x'           (2, 4) (2, 5)
    NEWLINE    '\\n'          (2, 5) (2, 6)
    NAME       '        \\tpass' (3, 0) (3, 13)

Non-ascii identifiers

    >>> dump_tokens("Örter = 'places'\\ngrün = 'green'")
    NAME       'Örter '      (1, 0) (1, 6)
    OP         '= '          (1, 6) (1, 8)
    STRING     "'places'"    (1, 8) (1, 16)
    NEWLINE    '\\n'          (1, 16) (1, 17)
    NAME       'grün '       (2, 0) (2, 5)
    OP         '= '          (2, 5) (2, 7)
    STRING     "'green'"     (2, 7) (2, 14)

Legacy unicode literals:

    >>> dump_tokens("Örter = u'places'\\ngrün = U'green'")
    NAME       'Örter '      (1, 0) (1, 6)
    OP         '= '          (1, 6) (1, 8)
    STRING     "u'places'"   (1, 8) (1, 17)
    NEWLINE    '\\n'          (1, 17) (1, 18)
    NAME       'grün '       (2, 0) (2, 5)
    OP         '= '          (2, 5) (2, 7)
    STRING     "U'green'"    (2, 7) (2, 15)

Indentation errors are ignored
    >>> dump_tokens('''def k(x):
    ...     x += 2
    ...   x += 5
    ... ''')
    NAME       'def '        (1, 0) (1, 4)
    NAME       'k'           (1, 4) (1, 5)
    OP         '('           (1, 5) (1, 6)
    NAME       'x'           (1, 6) (1, 7)
    OP         ')'           (1, 7) (1, 8)
    OP         ':'           (1, 8) (1, 9)
    NEWLINE    '\\n'          (1, 9) (1, 10)
    NAME       '    x '      (2, 0) (2, 6)
    OP         '+= '         (2, 6) (2, 9)
    NUMBER     '2'           (2, 9) (2, 10)
    NEWLINE    '\\n'          (2, 10) (2, 11)
    NAME       '  x '        (3, 0) (3, 4)
    OP         '+= '         (3, 4) (3, 7)
    NUMBER     '5'           (3, 7) (3, 8)
    NEWLINE    '\\n'          (3, 8) (3, 9)

No EOF errors
    >>> dump_tokens('(no closing bracket')
    OP         '('           (1, 0) (1, 1)
    NAME       'no '         (1, 1) (1, 4)
    NAME       'closing '    (1, 4) (1, 12)
    NAME       'bracket'     (1, 12) (1, 19)
    >>> dump_tokens("'''no closing quotes")
    ERRORTOKEN "'''no closing quotes" (1, 0) (1, 20)

Trailing whitespace is included
    >>> dump_tokens('a \\nb ')
    NAME       'a '          (1, 0) (1, 2)
    NEWLINE    '\\n'          (1, 2) (1, 3)
    NAME       'b '          (2, 0) (2, 2)
"""

import tokenize
from import_anything import utils as Utils

def dump_tokens(s):
    """Print out the tokens in s in a table format.

    The ENDMARKER is omitted.
    """
    strings = []
    for type, token, start, end, line in Utils.full_tokenize(s):
        if type == tokenize.ENDMARKER:
            break
        type = tokenize.tok_name[type]
        print('{:10}'.format(type), '{!r:13}'.format(token), start, end)
        strings.append(token)
    
    # additionally assert we got the same tsring (no need for roundtrip/untokenize)
    assert(''.join(strings) == s)
